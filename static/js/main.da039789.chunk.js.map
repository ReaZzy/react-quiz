{"version":3,"sources":["Components/Quiz/Quiz.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Quiz","React","memo","questions","submitAnswer","showNextButton","handleNext","showAnswers","style","border","borderRadius","padding","marginBottom","dangerouslySetInnerHTML","__html","question","display","width","justifyContent","flexWrap","className","correct_answer","answers","onClick","marginTop","App","useState","setQuestions","currentIndex","setCurrentIndex","score","setScore","categories","setCategories","setShowNextButton","setShowAnswers","gameStarted","setGameStarted","anyQuiz","setAnyQuiz","useCallback","prev","useEffect","axios","get","then","res","data","trivia_categories","length","answer","prevState","textAlign","initialValues","number","onSubmit","values","queryString","require","query","amount","difficult","difficulty","toLowerCase","category","stringify","results","map","e","incorrect_answers","sort","Math","random","response_code","type","max","min","name","as","id","value","i","margin","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.da039789.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\ntype PropsType = {\r\n    questions:any\r\n    submitAnswer: (answer:string) => void\r\n    showAnswers: boolean\r\n    showNextButton: boolean\r\n    handleNext: () => void\r\n}\r\n\r\nexport const Quiz:React.FC<PropsType> = React.memo(({questions, submitAnswer, showNextButton, handleNext, showAnswers}) => {\r\n    return (\r\n        <div>\r\n            <h2 style={{border:\"1px solid black\", borderRadius:\"10px\", padding:\"5px\", marginBottom:\"10px\"\r\n            }} dangerouslySetInnerHTML={{__html:questions.question}}/>\r\n            <div style={{display:\"flex\", width:\"100%\", justifyContent:\"space-between\", flexWrap:\"wrap\"}}>\r\n                    <button className={showAnswers?  questions.correct_answer === questions.answers[0] ? \"btn btn-success\": \"btn btn-danger\" :\"btn btn-light\"} onClick={()=>{submitAnswer(questions.answers[0])}}>{questions.answers[0]}</button>\r\n                    <button className={showAnswers?  questions.correct_answer === questions.answers[1] ? \"btn btn-success\": \"btn btn-danger\" :\"btn btn-light\"} onClick={()=>{submitAnswer(questions.answers[1])}}>{questions.answers[1]}</button>\r\n                    <button className={showAnswers?  questions.correct_answer === questions.answers[2] ? \"btn btn-success\": \"btn btn-danger\" :\"btn btn-light\"} onClick={()=>{submitAnswer(questions.answers[2])}}>{questions.answers[2]}</button>\r\n                    <button className={showAnswers?  questions.correct_answer === questions.answers[3] ? \"btn btn-success\": \"btn btn-danger\" :\"btn btn-light\"} onClick={()=>{submitAnswer(questions.answers[3])}}>{questions.answers[3]}</button>\r\n            </div>\r\n\r\n            {showNextButton && <button style={{display:\"flex\", justifyContent:\"center\", flexWrap:\"wrap\", marginBottom:\"5px\", marginTop:\"5px\", width:\"100%\"}} className={\"btn btn-outline-success\"}onClick={()=>{handleNext()}}>Next</button>}\r\n        </div>\r\n    )\r\n})","import React, {useCallback, useEffect, useState} from 'react';\nimport {Quiz} from \"./Components/Quiz/Quiz\";\nimport axios from \"axios\";\nimport {Field, Form, Formik} from \"formik\";\n\n/*type questionsType = Array<{\n    category:string\n    type:string\n    difficulty:string\n    question:string\n    correct_answer:string\n    incorrect_answers: string[]\n}>*/\n\nconst App = () => {\n    let [questions, setQuestions] = useState([])\n    let [currentIndex, setCurrentIndex]= useState(0)\n    let [score, setScore] = useState(0)\n    let [categories, setCategories] = useState([])\n    let [showNextButton, setShowNextButton] = useState(false)\n    let [showAnswers, setShowAnswers] = useState(false)\n    let [gameStarted, setGameStarted] = useState(false)\n    let [anyQuiz, setAnyQuiz] = useState(true)\n\n    const onSubmit = (values:any) => {\n        const queryString = require('query-string');\n        let query:any = {}\n        if (values.number) query.amount =values.number\n        if (values.difficult) query.difficulty =values.difficult.toLowerCase()\n        if (values.category) query.category =values.category\n        axios.get(`https://opentdb.com/api.php?${queryString.stringify(query)}&type=multiple`).then((res:any) => {\n            const questions = res.data.results.map((e:any) =>\n                ({\n                    ...e,\n                    question: e.question,\n                    answers: [\n                        e.correct_answer, ...e.incorrect_answers\n                    ].sort(()=>Math.random() - 0.5)\n                }))\n            setQuestions(questions)\n            if( res.data.response_code > 0) setAnyQuiz(false)\n            else setAnyQuiz(true)\n        })\n        setQuestions([])\n        setScore(0)\n        setCurrentIndex(0)\n        setGameStarted(true)\n    }\n    const submitAnswer =(answer:string) => {\n        if (!showAnswers) {\n            //@ts-ignore\n            if (answer === questions[currentIndex].correct_answer) {\n                setScore(prevState => prevState+1)\n            }\n        }\n        setShowNextButton(true)\n        setShowAnswers(true)\n    }\n    const handleNext =  useCallback(() =>{\n        setCurrentIndex(prev=>prev+1)\n        setShowNextButton(false)\n        setShowAnswers(false)\n    }, [])\n\n    useEffect(()=>{\n        axios.get(`https://opentdb.com/api_category.php`).then(res=>{\n            //@ts-ignore\n            setCategories(res.data.trivia_categories)\n        })\n    }, [])\n\n\n  return (\n    <div className=\"App\">\n        {gameStarted\n            ? anyQuiz\n                ? questions.length > 0\n                    ? currentIndex >= questions.length\n                        ? <h1 style={{display:\"flex\", justifyContent:\"center\", flexWrap:\"wrap\"}}>\n                            Quiz ended your score is {score} !\n                            <button className={\"btn btn-outline-success\"} onClick={()=>{setGameStarted(false)}}>Play again</button>\n                          </h1>\n                        : <div>\n                            <h3 style={{display:\"flex\", justifyContent:\"center\"}}>Current score is {score}</h3>\n                            <div style={{display:\"flex\", justifyContent:\"center\"}}>{currentIndex+1} / {questions.length}</div>\n                            <Quiz questions={questions[currentIndex]} submitAnswer={submitAnswer} showNextButton={showNextButton} handleNext={handleNext} showAnswers={showAnswers}/>\n                          </div>\n                    :<div>Preloader</div>\n                : <div>\n                    <h1 style={{display:\"flex\", justifyContent:\"center\", flexWrap:\"wrap\"}}>\n                        No such quiz finded\n                        <button className={\"btn btn-outline-success\"} onClick={()=>{setGameStarted(false)}}>Find another</button>\n                    </h1>\n                </div>\n            :<div>\n                <h1 style={{textAlign:\"center\"}}>Quiz game</h1>\n                <Formik\n                initialValues={{number:10}}\n                onSubmit={onSubmit}\n            >\n                <Form>\n                    <div style={{display:\"flex\", justifyContent:\"center\"}}>\n                        <Field  className=\"form-control\" style={{width:\"10%\", textAlign:\"center\"}} type={\"number\"} max={50} min={5} name={\"number\"}/>\n                        <Field style={{width:\"35%\"}} as=\"select\" className=\"form-control\" id=\"exampleFormControlSelect1\" name={\"category\"}>\n                            <option value={\"\"}>Any category</option>\n                            {categories.length > 0 && categories.map((e:any, i:number) => <option key={i} value={e.id}>{e.name}</option>)}\n                        </Field>\n                        <Field style={{width:\"35%\"}} as=\"select\" className=\"form-control\" id=\"exampleFormControlSelect1\" name={\"difficult\"}>\n                            <option>Any difficulty</option>\n                            <option>Easy</option>\n                            <option>Medium</option>\n                            <option>Hard</option>\n                        </Field>\n                    </div>\n                    <button style={{width:\"80%\",margin:\"0 auto\", display:\"flex\", justifyContent:\"center\", marginTop:\"5px\"}} type={\"submit\"} className={\"btn btn-success\"}>Play</button>\n                </Form>\n            </Formik></div>\n        }\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}